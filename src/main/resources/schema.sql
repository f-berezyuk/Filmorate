CREATE TABLE IF NOT EXISTS films
(
    id           INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name         VARCHAR NOT NULL,
    description  VARCHAR,
    releaseDate     DATE    NOT NULL,
    duration INTEGER
);

CREATE TABLE IF NOT EXISTS mpa
(
    id  INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    mpa VARCHAR NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS mpa_films
(
    id   INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    mpa  INTEGER NOT NULL REFERENCES mpa (id) ON DELETE CASCADE,
    film INTEGER NOT NULL REFERENCES films (id) ON DELETE CASCADE,
    CONSTRAINT one_per_film UNIQUE (mpa, film)
);

CREATE TABLE IF NOT EXISTS users
(
    id       INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name     VARCHAR,
    login    VARCHAR UNIQUE NOT NULL,
    email    VARCHAR UNIQUE NOT NULL,
    birthday DATE
);

CREATE TABLE IF NOT EXISTS friendships
(
    id        INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    user_from INTEGER NOT NULL REFERENCES users (id) ON DELETE CASCADE,
    user_to   INTEGER NOT NULL REFERENCES users (id) ON DELETE CASCADE,
    status    BOOLEAN NOT NULL DEFAULT false,
    CONSTRAINT friendship_pair_ft UNIQUE (user_from, user_to),
    CONSTRAINT friendship_pair_tf UNIQUE (user_to, user_from)
);

CREATE TABLE IF NOT EXISTS likes
(
    id      INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users (id) ON DELETE CASCADE,
    film_id INTEGER NOT NULL REFERENCES films (id) ON DELETE CASCADE,
    CONSTRAINT likes_unique UNIQUE (user_id, film_id)
);

CREATE TABLE IF NOT EXISTS genres
(
    id    INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    genre VARCHAR NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS genre_films
(
    id    INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    genre INTEGER NOT NULL REFERENCES genres (id) ON DELETE CASCADE,
    film  INTEGER NOT NULL REFERENCES films (id) ON DELETE CASCADE,
    CONSTRAINT genre_unique UNIQUE (genre, film)
);